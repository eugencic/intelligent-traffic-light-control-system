# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import traffic_regulation_pb2 as traffic__regulation__pb2


class TrafficRegulationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReceiveDataForLogs = channel.unary_unary(
                '/main.TrafficRegulation/ReceiveDataForLogs',
                request_serializer=traffic__regulation__pb2.TrafficDataForLogs.SerializeToString,
                response_deserializer=traffic__regulation__pb2.TrafficDataForLogsReceiveResponse.FromString,
                )
        self.AddDataRegulation = channel.unary_unary(
                '/main.TrafficRegulation/AddDataRegulation',
                request_serializer=traffic__regulation__pb2.AddDataRegulationRequest.SerializeToString,
                response_deserializer=traffic__regulation__pb2.AddDataRegulationResponse.FromString,
                )
        self.DeleteDataRegulation = channel.unary_unary(
                '/main.TrafficRegulation/DeleteDataRegulation',
                request_serializer=traffic__regulation__pb2.DeleteDataRegulationRequest.SerializeToString,
                response_deserializer=traffic__regulation__pb2.DeleteDataRegulationResponse.FromString,
                )
        self.GetTodayControlLogs = channel.unary_unary(
                '/main.TrafficRegulation/GetTodayControlLogs',
                request_serializer=traffic__regulation__pb2.IntersectionRequestForLogs.SerializeToString,
                response_deserializer=traffic__regulation__pb2.TrafficRegulationResponse.FromString,
                )
        self.GetLastWeekControlLogs = channel.unary_unary(
                '/main.TrafficRegulation/GetLastWeekControlLogs',
                request_serializer=traffic__regulation__pb2.IntersectionRequestForLogs.SerializeToString,
                response_deserializer=traffic__regulation__pb2.TrafficRegulationResponse.FromString,
                )
        self.TrafficRegulationServiceStatus = channel.unary_unary(
                '/main.TrafficRegulation/TrafficRegulationServiceStatus',
                request_serializer=traffic__regulation__pb2.TrafficRegulationServiceStatusRequest.SerializeToString,
                response_deserializer=traffic__regulation__pb2.TrafficRegulationServiceStatusResponse.FromString,
                )


class TrafficRegulationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReceiveDataForLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDataRegulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDataRegulation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTodayControlLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLastWeekControlLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrafficRegulationServiceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrafficRegulationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReceiveDataForLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveDataForLogs,
                    request_deserializer=traffic__regulation__pb2.TrafficDataForLogs.FromString,
                    response_serializer=traffic__regulation__pb2.TrafficDataForLogsReceiveResponse.SerializeToString,
            ),
            'AddDataRegulation': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDataRegulation,
                    request_deserializer=traffic__regulation__pb2.AddDataRegulationRequest.FromString,
                    response_serializer=traffic__regulation__pb2.AddDataRegulationResponse.SerializeToString,
            ),
            'DeleteDataRegulation': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDataRegulation,
                    request_deserializer=traffic__regulation__pb2.DeleteDataRegulationRequest.FromString,
                    response_serializer=traffic__regulation__pb2.DeleteDataRegulationResponse.SerializeToString,
            ),
            'GetTodayControlLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTodayControlLogs,
                    request_deserializer=traffic__regulation__pb2.IntersectionRequestForLogs.FromString,
                    response_serializer=traffic__regulation__pb2.TrafficRegulationResponse.SerializeToString,
            ),
            'GetLastWeekControlLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLastWeekControlLogs,
                    request_deserializer=traffic__regulation__pb2.IntersectionRequestForLogs.FromString,
                    response_serializer=traffic__regulation__pb2.TrafficRegulationResponse.SerializeToString,
            ),
            'TrafficRegulationServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.TrafficRegulationServiceStatus,
                    request_deserializer=traffic__regulation__pb2.TrafficRegulationServiceStatusRequest.FromString,
                    response_serializer=traffic__regulation__pb2.TrafficRegulationServiceStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.TrafficRegulation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrafficRegulation(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReceiveDataForLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.TrafficRegulation/ReceiveDataForLogs',
            traffic__regulation__pb2.TrafficDataForLogs.SerializeToString,
            traffic__regulation__pb2.TrafficDataForLogsReceiveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDataRegulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.TrafficRegulation/AddDataRegulation',
            traffic__regulation__pb2.AddDataRegulationRequest.SerializeToString,
            traffic__regulation__pb2.AddDataRegulationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDataRegulation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.TrafficRegulation/DeleteDataRegulation',
            traffic__regulation__pb2.DeleteDataRegulationRequest.SerializeToString,
            traffic__regulation__pb2.DeleteDataRegulationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTodayControlLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.TrafficRegulation/GetTodayControlLogs',
            traffic__regulation__pb2.IntersectionRequestForLogs.SerializeToString,
            traffic__regulation__pb2.TrafficRegulationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLastWeekControlLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.TrafficRegulation/GetLastWeekControlLogs',
            traffic__regulation__pb2.IntersectionRequestForLogs.SerializeToString,
            traffic__regulation__pb2.TrafficRegulationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrafficRegulationServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.TrafficRegulation/TrafficRegulationServiceStatus',
            traffic__regulation__pb2.TrafficRegulationServiceStatusRequest.SerializeToString,
            traffic__regulation__pb2.TrafficRegulationServiceStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
